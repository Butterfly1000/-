https://www.cnblogs.com/loveyoume/articles/5838981.html
https://blog.csdn.net/smm188/article/details/54743671
PHP运行模式有4种：
1）cgi 通用网关接口（Common Gateway Interface)）
2）fast-cgi 常驻 (long-live) 型的 CGI
3）cli  命令行运行   （Command Line Interface）
4）web模块模式 （apache等web服务器运行的模块模式）

1.CGI（Common Gateway Interface）
CGI即通用网关接口(Common Gateway Interface)，
它是一段程序, 通俗的讲CGI就象是一座桥，把网页和WEB服务器中的执行程序连接起来，它把HTML接收的指令传递给服务器的执行程序，再把服务器执行程序的结果
返还给HTML页。
CGI 的跨平台性能极佳，几乎可以在任何操作系统上实现。 但CGI已经是比较老的模式了，这几年都很少用了。

运行模式：每有一个用户请求，都会先要创建cgi的子进程，然后处理请求，处理完后结束这个子进程，这就是fork-and-execute模式。 

弊端：当用户请求数量非常多时，会大量挤占系统的资源如内存，CPU时间等，造成效能低下。因为用cgi方式的服务器有多少连接请求就会有多少cgi子进程，
子进程反复加载是cgi性能低下的主要原因。

2.Fastcgi模式
fast-cgi 是cgi的升级版本，FastCGI 像是一个常驻 (long-live) 型的 CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去 fork 一次 
(这是 CGI 最为人诟病的 fork-and-execute 模式)。 

(1)Web Server启动时载入FastCGI进程管理器【PHP的FastCGI进程管理器是PHP-FPM(php-FastCGI Process Manager)】（IIS ISAPI或Apache Module);

(2)FastCGI进程管理器自身初始化，启动多个CGI解释器进程 (在任务管理器中可见多个php-cgi.exe)并等待来自Web Server的连接。

(3)当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。

(4)、FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待
并处理来自FastCGI进程管理器（运行在 WebServer中）的下一个连接。在正常的CGI模式中，php-cgi.exe在此便退出了。

在CGI模式中，你可以想象 CGI通常有多慢。每一个Web请求PHP都必须重新解析php.ini、重新载入全部dll扩展并重初始化全部数据结构。
使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。

Fastcgi的优点：
1）从稳定性上看, fastcgi是以独立的进程池运行来cgi,单独一个进程死掉,系统可以很轻易的丢弃,然后重新分 配新的进程来运行逻辑.

2）从安全性上看,Fastcgi支持分布式运算. fastcgi和宿主的server完全独立, fastcgi怎么down也不会把server搞垮.

3）从性能上看, fastcgi把动态逻辑的处理从server中分离出来, 大负荷的IO处理还是留给宿主server, 这样宿主server可以一心一意作IO,
对于一个普通的动态网页来说, 逻辑处理可能只有一小部分, 大量的图片等静态 

FastCGI缺点：说完了好处，也来说说缺点。从我的实际使用来看，用FastCGI模式更适合生产环境的服务器。
但对于开发用机器来说就不太合适。因为当使用 Zend Studio调试程序时，由于 FastCGI会认为 PHP进程超时，从而在页面返回 500错误。
这一点让人非常恼火，所以我在开发机器上还是换回了 ISAPI模式。


