项目中优化SQL语句执行效率的方法，从哪些方面，SQL语句性能如何分析？
首先想要优化就必须先了解慢的原因。
四个点：
1.查找分析查询速度慢的原因
2.优化查询过程中的数据访问
3.优化长难的查询语句
4.优化特定类型的查询语句

★查找分析查询速度慢的原因
分析SQL查询慢的方法
1.记录慢查询日志（开启慢查询:set global slow_query_log=ON）

分析查询日志,不要直接打开慢查询日志，这样比较浪费时间和精力，可以用pt-query-digest工具进行分析
#直接分析慢查询文件
# pt-query-digest  slow.log > slow_report.log
#分析最近12小时内的查询
# pt-query-digest  --since=12h  slow.log > slow_report2.log

注：具体可参阅"MySQL日志查询分析工具pt-query-digest的安装和使用方法"章内容。

2.使用show profile
set profiling=1; #开启，服务器上所有执行的语句会检测消耗时间，记录到临时表中
show profiles; #查看(临时表ID,执行时间,query语句)
+----------+------------+-----------------+
| Query_ID | Duration   | Query           |
+----------+------------+-----------------+
|        1 | 2.00026774 | select sleep(2) |
|        2 | 1.00029249 | select sleep(1) |
+----------+------------+-----------------+

show profile for query 临时表ID #可以查看该条语句每个环节具体消耗的时间

+----------------------+----------+
| Status               | Duration |
+----------------------+----------+
| starting             | 0.000055 |
| checking permissions | 0.000006 |
| Opening tables       | 0.000005 |
| After opening tables | 0.000007 |
| init                 | 0.000012 |
| optimizing           | 0.000008 |
| executing            | 0.000011 |
| User sleep           | 2.000097 |
| end                  | 0.000019 |
| query end            | 0.000006 |
| closing tables       | 0.000005 |
| freeing items        | 0.000008 |
| updating status      | 0.000020 |
| logging slow query   | 0.000005 |
| cleaning up          | 0.000005 |
+----------------------+----------+

3.使用show status
show status
show global status 查看服务器级别的所有计数
有时根据这些计数，可以猜测出哪些操作代价更高或者消耗时间多

使用show processlist
观察是否有大量线程处于不正常的状态或者特征
+----+------+-----------+------+---------+------+-------+------------------+----------+
| Id | User | Host      | db   | Command | Time | State | Info             | Progress |
+----+------+-----------+------+---------+------+-------+------------------+----------+
| 23 | root | localhost | NULL | Query   |    0 | NULL  | show processlist |    0.000 |
+----+------+-----------+------+---------+------+-------+------------------+----------+

4.使用explain （别名desc效果一样）
分析单条SQL语句
select_type：查询中每个 select 子句的类型。
table:名字，被操作的对象名称，通常的表名(或者别名)，但是也有其他格式。
partitions:匹配的分区信息。
type:join 类型。
possible_keys：列出可能会用到的索引。
key:实际用到的索引。（重点）
key_len:用到的索引键的平均长度，单位为字节。
ref:表示本行被操作的对象的参照对象，可能是一个常量用 const 表示，也可能是其他表的*（重点）
key 指向的对象，比如说驱动表的连接列。
rows:估计每次需要扫描的行数。（重点）
filtered:rows*filtered/100 表示该步骤最后得到的行数(估计值)。
extra:重要的补充信息。


★优化查询过程中的数据访问
1.访问数据太多导致查询性能下降
2.确定应用程序是否在检索大量超过需求的数据，可能是太多行或列
3.总是取出全部列，select * 会让优化器无法完成索引覆盖扫描的优化
（简单说就是，要少用*，精确指定需要的列，可根据情况使用limit）

4.重复查询相同的数据，可以缓存数据，下次直接读取缓存
5.是否在扫描额外的记录
使用explain来进行分析，如果发现查询需要大量的数据但只返回少数行，可以通过如下技巧去优化:
使用索引覆盖扫描，把所有用的列都放到索引中，这样存储引擎不需要回表获取应对行，就可以返回结果。

6.改变数据库和表的结构，修改数据表范式。（非常频繁获取但又需要连表的字段，可以考虑用冗余方式多加一个字段，不用连表，用空间换时间，当然也破坏范式）
7.重写SQL语句，让优化器可以以更优的方式执行查询

优化长难查询语句
1.一个复杂查询还是多个简单查询
MySQL内部每秒能扫描上百万行数据，相比之下，响应数据给客服端就要慢得多
使用尽可能少的查询是好的，但是有时将一个大的查询分解成多个小的查询是很有必要的（例如：大量连表（且其中某些表数据获取少，但表数据量很大）.个人理解）

2.切分查询
将一个大的查询分为多个小的相同查询
比如要删除1000万数据，每次删除1w，然后暂停1会再行下一次，会比一次性删除1000w条数据对服务器的开销损耗更小，
也能减少锁表时间太长的情况。

3.分解关联查询
将一条关联语句分解分解成多条SQL来执行
让缓存的效率更高
执行单个查询可以减少锁的竞争
在应用层做关联可以更容易对数据库进行拆分
查询效率会有大幅提升
较小冗余记录查询

4.优化count()查询
这个真的会很消耗查询时间哦，特别是数据量很大的情况下。
方法：
count（*）会忽略所有列，直接统计所有行数，因此不用使用count（列名）
MyISAM中，没有任何where条件的count(*)非常快，然后当有where，它的count数据就不见得比其他引擎快了（谁快难说）

但是这样还是会消耗一定的时间：
可以使用explain查询近似值，用近似值取代count（*）
添加汇总表（精确，更新的时候自动加1）
使用缓存（近似值，偏差大小，看缓存时间）

5.优化关联查询（其实就是要加索引）
确定ON或者USING子句的列上有索引
[sql]
SELECT f.color, c.is_primary, c.is_dark, c.is_rainbow  
FROM flags f    www.2cto.com  
INNER JOIN color c ON f.color = c.color  
WHERE f.country = 'China';  
等价于
[sql]
SELECT f.color, c.is_primary, c.is_dark, c.is_rainbow  
FROM flags f  
INNER JOIN color c USING(color)  
WHERE f.country = 'China';  

确保group by 和order by 中只有一个列表的值，这样MySQL才有可能用索引。

6.优化子查询（嵌套查询）
尽可能使用关联查询代替

7.优化GROUP BY 和 DISTINCT
这两种查询均可以使用索引来优化，是最有效的优化方法;
关联查询中，使用标识列进行分组效率会更高;(标识列即主键或AUTO_INCREMENT列)
如果不需要使用到order by，进行group by时使用order by NULL,MySQL不会在进行文件排序
*WITH ROLLUP超级聚合，可以挪到应用程序处理

8.优化limit分页
LIMIT偏移量大的时候，查询效率较低
可以记录上次查询最大的ID,下次查询时，直接根据该ID来查询
释：
limit（offset，size）; offset偏移量 size数量
select * from user limit 10000,10;//耗时多
select * from user where uid >=( select uid from user order by uid limit 10000,1 ) limit 10;//耗时小
当然如果记录下ID max_id最大的ID
select * from user where uid >max_id limit 10;//最优

9.优化UNION查询
UNION ALL 的效率高于UNION (当然二者有偏差，具体见划重点3)



