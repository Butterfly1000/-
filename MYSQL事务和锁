整理一下对于MYSQL事务和锁的理解。
MYSQL中只有INNODB和BDB类型的数据表才能支持事务处理！其它类型是不支持的！
首先说一下，事务吧。
概念性：
事务(Transaction)，一般是指要做的或所做的事情。（常义）
事务(Transaction)在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。
是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。
例如:在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序。

好吧，简单的说，就是完成一件事情，而完成这件事情要遵守一个叫ACID规则。
ACID规则：
事务的原子性（一个事务要么同时成功，要么同时失败），一致性(访问的数据一致)，隔离性（以性能为理由，对一致性的破坏），持久性(B,C访问后不可在将数据逆推，
即事务完成后，被访问就不可以在逆推回去了)。

事务（单个事务单元），这些也是一个事务单元:
商品要建立一个基于GMT_Modified的索引（索引列创建过程）
从数据库中读取一行记录
向数据库中写入一行记录，同时更新这行记录的所有索引
删除整张表
等等(Etc)...

说了这边多，下面就简单介绍下事务的开启方式：
tp3.2事务
M()->startTrans();//开启事务
M()->commit();//提交事务
M()->rollback();//事务回滚

php事务
$mysqli->autocommit(FALSE);//关闭自动提交功能
if(true){
  $msyqli->commit(); //提交事务
  $mysqli->autocommit(TRUE); //开启自动提交功能
}else{
  $mysqli->rollback();//事务回滚
}

接下去说一下锁，
锁的概念很复杂，但简单的说就是防止访问冲突。
A,B,C三个访问。 
A先执行，Bob向Job转100元，
三个步骤:1.Bob账户是否有100元；2.Bob账户扣除100元;3.Job账户加上100元。
这个过程中，Bob和Job的账户访问被锁上，B和C必须等待A访问结束。
（避免在Bob账户扣除100元后，Job账户还未加上100元的时候被B,C访问到，导致数据不一致）
例如:某银行c存蓄有100元，a向c扣取50元费用，而同时c取出70元，然后a的动作未完成，c的动作已经进入，这时会出现，实际上c卡中只有50元，不足以
取出70元，但因为a的动作未完成，仍是显示100元，导致最终金额出错。（100-50 100-70 同时进行 最终100-120 出错），所以必须再a的动作上做锁操作，
让c只能等待a完成后再进行。

tp3.2锁操作
M()->lock(true)->where('id=1')->select();

mysql
利用for update 开启行锁
select `number` from storage where id=1 for UPDATE 



