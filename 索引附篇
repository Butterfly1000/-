索引的优点
合适的索引，可以大大减小mysql服务器扫描的数据量，避免内存排序和临时表，提高应用程序的查询性能。

索引的类型
mysql数据中有多种索引类型，primary key，unique，normal，但底层存储的数据结构都是BTREE；有些存储引擎还提供hash索引，全文索引。

BTREE是最常见的优化要面对的索引结构，都是基于BTREE的讨论。
【转】https://www.cnblogs.com/scode2/p/8671268.html

索引的类型
普通索引：最基本的索引，没有任何约束限制 ALTER TABLE `table_name` ADD INDEX index_name(`column`) 
唯一索引：与普通索引类似，但是具有唯一约束性 ALTER TABLE `table_name` ADD UNIQUE (`column`) 
主键索引：特殊的唯一索引，但不允许有空值  ALTER TABLE `table_name` ADD PRIMARY KEY (`column`) 
组合索引：将多个列组合在一起穿件索引，可以覆盖多个列 ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )
外键索引：只有InnoDB引擎才可以使用外键索引，可以与主键构成参照完整性约束，保证数据一致性，完整性和实现级联操作 
全文索引：Mysql自带只有MyISAM才拥有全文索引，并且是对英文进行全文索引。 ALTER TABLE `table_name` ADD FULLTEXT( `column`) 

★索引的缺点
1.索引是占用空间的（索引文件）
2.写入时，需要修改索引文件，所以影响写的速度（写=》更新和插入）

★合理的字段上建立索引
1.在经常用来当查询条件(where,on,group by,order by)的字段上建立索引。

2.在数据的维度比较大的字段上建立索引。（简单讲，就是很多不同的值）

3.对数据较小的列使用索引，可以使索引文件更小，同时内存中也可以装载更多的索引键。

4.为较长的字符串使用前缀索引。比如数据的长度大部分是150个字节，我们只建立前100个字节的索引。


★索引不生效的场景 【参考原文地址】：https://www.siammm.cn/archives/100
system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL
并不是建立了索引就在查询语句中生效。

1.当语句中带有or的时候，索引会失效
explain检验：完全没有索引等级为ALL，添加索引后等级位const（优秀级别）,使用or之后，等级回落到index（不理想级别：与ALL区别为index类型只遍历索引树）。

2.当索引的字段使用like查询，并且使用了前通配比如%Siam，索引失效。后通配会生效Siam%
explain检验：索引等级为const，使用了前通配'%Siam'等级掉到index，使用了后通配'Siam%'等级掉到range，全通配'%Siam%'等级也是掉到index。
结论：like会使索引效率下降，后通配会好一点。

3.当索引的字段是字符类型，但是储存的值是数字，比如 user_name:’123456’，在查询语句中要 user_name = ‘123456’而不能 user_name = 123456 
否则发生类型转换，索引失效，其他类型的字段，比如日期等也同理。
explain检验： user_name = ‘123456’(字符串)索引等级为const，user_name = 123456(整型)索引等级为index。

4.当使用的条件语句，预计结果数量超过全表数据的一定比例时，会转为全表扫描（mysql一般是30%左右）这就是为什么在建立索引的时候要选择维度（区别度）比较高
的列，性别这种字段不适合建立索引。

5.语句中出现列数据运算才判断的，比如where age – 10 > 0 每一行都要运算之后才知道是否大于0; 所以就是全表扫描，如果age > 10 则可使用索引。
使用函数转换列数据也一样原理。

6.组合索引时使用的条件语句。

∈上面举例的一些场景都是比较容易理解的。组合索引还没涉及，往下继续介绍。

◆ mysql中，多个索引同时使用？
虽然两个字段的索引都没有问题，如果单独使用也都能生效。【但是】，MySQL会从可用的索引中猜测出【效率最高】的【一个】索引并使用它。

基于这个情况，会引申出两个知识点
1.组合索引
2.多个单字段索引冲突

◇组合索引
这个再正编已经提到了，再简单举例介绍吧。

在组合索引中，字段顺序也是极为重要的。

假设我们有这样一个索引：new : a,b,c 字段

在查询时使用where a = 1 and b = 2 and c= 3。那么这个语句肯定是生效的。

如果我们使用where b = 2 and c =3没有a条件 而a又是在组合索引中最左侧的，那么索引就不会生效。（b生效，a必须存在;c生效，ab必须存在）

还是要扫描全部行。

where a,c where a,b where b,a,c 这样子使用都是可以生效的。

组合索引要注意字段顺序，【是指】在创建索引时候的排序，【而不是】sql语句中where的顺序，我们使用where b = 2 and a = 1 and c = 3也是 可以生效的。


◇多个单字段索引冲突

如果我们在表中，拥有两个索引，比如user_name 用户名, user_phone 用户手机号

现在有这样子的数据量：
100W条数据 user_name=’我是用户名’
100条数据 user_phone=’110′
5条数据 user_name=’我是用户名’ and user_phone=’110′

假设有这样子一条语句：
select * from test where user_name = '我是用户名' and user_phone='110'

有两个字段都有索引可用，mysql会选择一个使用。这是属于mysql的内部处理判断

正常情况下，如果用user_phone索引生效的话，会很快得到结果（先筛选出100条 再筛选）

如果user_name生效，则要先筛选100W条数据，再筛选user_phone

mysql的内部判断可能使得user_name索引生效，此时效率就会很低了，我们可以【强制使用某个索引】。
---->
phone是索引名 是新建的时候填的【phone对应的字段user_phone】

select * from test index(phone) where user_name = '我是用户名' and user_phone='110'

！！此种情况出现的概率比较小，毕竟mysql的解释器很复杂，也做了足够多的优化。只有排查慢日志并且分析确定索引冲突的情况才需要强制使用索引。

★优化（总结）

1.只在经常使用的字段上建立索引，否则会拖慢数据更新和插入的速度。

2.只在维度高的字段上建立索引，否则会使得数据比例过大，转为全表扫描。

3.优先对数据量比较小的字段建立索引，可以使索引文件更小，同时内存中也可以装载更多的索引键。

4.规范sql语句的生成，禁止发生列运算、类型转换的发生。

5.长字符串可以使用前缀索引，只对字符串的前面一定字符长度建立索引。

6.组合索引的顺序合理优化

7.当多个单字段索引发生冲突时，强制使用某个索引。




