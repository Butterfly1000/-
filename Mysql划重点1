mysql数据类型
整形
tinyint、smallint、mediumint、int、bigint
属性:unsigned (无符号，不区分正负值)
长度:这个长度只表示单纯的表示字符宽度，不影响取值范围。
例如:int(3) 这边的3并不能限制值的范围。
int(3) 
1234 支持
但是也是有影响，例如零填充zerofill
int(3)
12 -> 012
int(5)
12 -> 00012

浮点型
float(单精度)、double(双精度)、decimal
三者的区别介绍
float:浮点型，含字节数为4，32bit，数值范围为-3.4E38~3.4E38（7个有效位）
double:双精度实型，含字节数为8，64bit数值范围-1.7E308~1.7E308（15个有效位）
decimal:数字型，128bit，不存在精度损失，常用于银行帐目计算。（28个有效位）

单精度浮点数在机内占4个字节，用32位二进制描述。
双精度浮点数在机内占8个字节，用64位二进制描述。

对编程人员来说，double 和 float 的区别是double精度高，有效数字16位，
float精度7位。但double消耗内存是float 的两倍，double的运算速度比float慢得多，C语言中数学函数名称double 和 float不同，不要写错，
能用单精度时不要用双精度（以省 内存，加快运算速度）。

decimal可以存储精确数值（支持无论多少的小数点后的位数，存储量大，float和double会受限于取值范围）,但是double和float的运算效率更好。
decimal默认 10,0

字符型
varchar、char、text、blob
varchar
特点：
1.可变长度存储，例如varchar（12） 你存储一个8位的，它会自动调节到8位存储。比起char更节省空间。（优点）
2.varchar会有1~2个记录长度的额外字符。当列长度小于255，会有1个，否则2个。
3.存储内容超出指定长度会被截断或者报错（很可能是报错）。

char
特点：
1.char是定长的，定义多少字符长度就分配多少空间。
2.char会根据需要采用空格进行填充以方便比较。
3.char适合存储很短的字符串，或者所有值都接近同一个长度（例如:md5后都是32位）
4.存储内容超出指定长度会被截断或者报错。

那么char的优点呢？
1.对经常变更的数据，char比varchar更好，char不容易产生碎片。
2.对非常短的列，char比varchar在存储空间上更有效率。
3.只分配真正需要的空间，更长的列会消耗更多的内存。（提前确定，规范）

blob/text
尽量避免使用blob/text类型，查询会使用临时表，导致严重的性能开销。
--------------------------------------------------------------------------------
BLOB小课堂：
BLOB (binary large object)，二进制大对象，是一个可以存储二进制文件的容器。
在计算机中，BLOB常常是数据库中用来存储二进制文件的字段类型。BLOB是一个大文件，
典型的BLOB是一张图片或一个声音文件，由于它们的尺寸，必须使用特殊的方式来处理（例如：上传、下载或者存放到一个数据库）。
根据Eric Raymond的  说法，处理BLOB的主要思想就是让文件处理器（如数据库管理器）不去理会文件是什么，而是关心如何去处理它。
但也有专家强调，这种处理大数据对象的方法是把双刃剑，它有可能引发一些问题，如存储的二进制文件过大，会使数据库的性能下降。
在数据库中存放体积较大的多媒体对象就是应用程序处理BLOB的典型例子。

mysql BLOB类型  
    MySQL中，BLOB是个类型系列，包括：TinyBlob、Blob、MediumBlob、LongBlob，这几个类型之间的唯一区别是在存储文件的最大大小上不同。  
　　MySQL的四种BLOB类型  
　　类型 大小(单位：字节)  
　　TinyBlob 最大 255  
　　Blob 最大 65K  
　　MediumBlob 最大 16M  
　　LongBlob 最大 4G  
  
linux修改etc/my.cnf  
    [mysqld]  
    max_allowed_packet = 16M //不同于[mysqldump]下的max_allowed_packet 
    
转自:http://blog.sina.com.cn/s/blog_6cd73dfb0100ymxx.html    
---------------------------------------------------------------------------------
    
枚举类型
有时候可以使用枚举代替常用的字符串类型把不重复的集合存储成一个预定的集合非常紧凑，把列表值压缩到一个或两个字节，
内部存储的是整数。
尽量避免使用数字作为ENUM枚举的常量，易混乱。
排序是按照内部存储的整数进行排序。
枚举表（使用枚举的表）会使表大小大大减小。（因为存储的是整形么）
-----------------------
ENUM是枚举类型，它虽然只能保存一个值，却能够处理多达65535个预定义的值。

CREATE TABLE student(
id INT(11) PRIMARY key auto_increment,
name VARCHAR(10) not null,
sex ENUM('boy','girl','secret') DEFAULT 'secret'
)ENGINE=INNODB

如果sex列中插入了除bor,girl,secret之外的其它字符，则视为空字符串
转自：https://www.cnblogs.com/dcdcdc/p/5157321.html
-----------------------


日期和时间类型
尽量使用TIMESTAMP,比DATETIME空间效率高
用整数保存数据错的格式通常不方便处理
如果需要存储微妙，可以使用bigint存储（可以乘十万存储，取出再除）

列属性
auto_increment,default,not null,zerofill


延伸1：Mysql基础操作
常见操作
MYSQL的连接和关闭:mysql -u -p -h -P    用户名、密码、主机、端口
其他：\G（打印结果垂直显示，格式化）、\c（取消当前mysql命令）、\q（退出mysql）、\s(显示mysql服务器状态)、\h(帮助信息)、\d(改变执行服务)

延伸2:Mysql数据表引擎
InnoDB表引擎
默认事务型引擎，最重要最广泛的存储引擎，性能非常优秀
数据存储在共享表空间，可以通过配置分开
对主键查询的性能高于其他类型的存储引擎
内部做了很多优化，从磁盘读取数据时自动在内存构建hash索引，插入数据时自动构建插入缓冲区
通过一些机制和工具真正支持热备份
支持崩溃后的安全恢复
支持行级锁
支持外键

MyISAM表引擎
5.1版本前，MyISAM是默认的存储引擎
拥有全文索引、压缩、空间函数
不支持事务和行级锁，不支持崩溃后的安全恢复
表存储在两个文件，MYD和MYI
设计简单，某些场景下性能很好
---
.frm是存储数据表的框架结构
.MYD是MyISAM表的数据文件的扩展名
.MYI是MyISAM表的索引的扩展名
当你对数据库的操作有大量的select，就用MyISAM表
当你对数据库的操作有大量的insert or update，就用InnoDB表
【转】http://blog.sina.com.cn/s/blog_4b93170a0100m8dl.html

其他表引擎
Archive、Blackhole、CSV、Memory

延伸3：Mysql锁机制
表级锁：开销小，加锁块；不会出现死锁，锁定粒度大，发生锁冲突的概率最高，并发度最低。
行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发性也最高。
页面锁：开销和加锁界于表锁和行锁之间，会出现死锁；锁定粒度界与表锁和行锁之间，并发一般。









