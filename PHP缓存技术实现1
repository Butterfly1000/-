1.从架构看缓存
2.文件类缓存
3.内存数据库之Memcached
4.内存数据库之Redis
5.浏览器缓存机制
6.服务器程序的缓存

一.从架构看缓存
1.1布置缓存的目录（本质：空间换时间）
◆压力均分，减少对瓶颈环节的流量冲击
（将mysql查询结果存储在缓存，从缓存读取）

◆简化处理流程，提升整个流程的处理数据
（将整合完成的数据存储在缓存）

◆持久化和固化数据
（基本不变的数据）


1.2合理使用缓存
适合存放哪些内容：
◆实时性变化要求不严格的内容

◆经常访问但改动不频繁的内容

（为什么不都用缓存存储？缓存区域空间有限，且缓存介质一般贵于存储介质）


1.3哪些位置适合做缓存
浏览器（浏览器缓存）->CDN->WebServer->php（也可以实现部分结果静态化）->内存数据库->数据库（缓存查询）
                                  ->静态资源（DiskCache）


2.1CDN缓存原理和介绍
◆各地部署多套静态存储服务，本质上是空间成本换时间成本

◆自动选择最近的节点内容，不存在再请求原始服务器

◆适合存储更新很少的静态内容，文件更新慢

（上面的总结一下哈：
  CDN其实就是设置多静态存储服务器节点，简单的说就是让你从最近的地方获取资源。
  比如主服务器在北京，这时候CDN有布置在福建的存储服务器。那么，在福建的用户访问图片资源就可以直接从福建的节点获取，当然就更快了。
  优点：减少主服务器请求压力，获取静态资源速率提升。
  缺点：耗费金钱成本，毕竟多搭建静态存储服务器要钱哈。
  特性：适合用于存放静态资源，且更新慢的哦。记住不是不行，而是适合。）
  
 CDN服务：阿里云，百度，腾讯应该都有提供，小公司使用这种即可，大公司可搭建CDN。
 
 下面讲讲搭建部分，
 
 ★传统途径：
 浏览器-> http://??.imooc.com -> DNS(解析域名) -> 117.121.101.41 -> 原始服务器
 
 1.对于服务器而言，本身就有DNS缓存，访问一次后会记录在本地。
 
 2.浏览器也会记录DNS缓存。（最常见的就是用host修改域名ip地址后，有时候需要清除缓存才能到更新ip地址）
 
 加入了CDN缓存服务器后：
假设CDN缓存服务器搭建在美国、北京和广州。原始服务器在北京。

浏览器->广州DNS(广州DNS回应它也不知道准确的IP,但把全局负载均衡IP地址返回给浏览器)
 ↓（获得全局负载均衡IP后）
浏览器（访问）->全局负载均衡（根据用户的物理地址，查看最近的节点的负载压力，如果压力大找下一个最近节点，压力不大择选用该节点。确定节点
IP后返回给浏览器。）->CDN缓存服务器（假设用户在广州，且广州节点压力不大，负载均衡提供广州IP地址给浏览器后，浏览器就会访问广州的服务器，
减少对原始服务器【北京】的请求，并且提升速率。）

那么如果CDN缓存服务器没内容呢？就会向上一级缓存服务器请求，如果还没有，最终可能请求到原始服务器上。

2.2数据文件缓存方案
客户访问->页面焦点图->（AJAX）焦点图JSON(banner.json)<-（file_put_contents()）后台修改焦点图->数据库
(
简单解析:
1.后台修改内容数据的时候，将数据保存进一份json文件，然后把数据内容保存进数据库。
2.客户端请求焦点图数据时，通过ajax请求后端接口，后端接口通过json文件获取数据返回给前端。（无需请求mysql）

问题：那么为什么不所有数据都这么处理？
1.多生成json文件会占用一定空间；
2.该方法适合固定数据（仅后台能修改），如数据会根据用户行为改变的，就不可使用。

)

划重点:将更新频率极低且读取机率高的数据缓存为文件，获取时不再查询数据库而是直接读和解析文件内容。

2.3全页面静态化
CMS系统(后台内容管理系统)很喜欢做这个。

1.制作一个预留变量的模板文件template；
2.后端获取mysql数据库数据，按照一定格式放入数组(格式方便变量读取即可)；
3.获取模板文件内容；
4.遍历步骤2获得的数组，替换模板文件中的预留变量；
5.将替换后的内容生成（fopen、file_put_contents）静态页面(HTML页面)；
6.客户端直接访问静态页面；






 
 
 
 
 
 
 
 

