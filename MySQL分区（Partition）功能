MySQL分区（Partition）功能
= 水平分区（根据列属性按行分）=
举个简单例子：一个包含十年发票记录的表可以被分区为十个不同的分区，每个分区包含的是其中一年的记录。

★水平分区的模式：
Range（范围） – 这种模式允许DBA将数据划分不同范围。例如DBA可以将一个表通过年份划分成三个分区，80年代（1980's）的数据，90年代（1990's）的数据以及
               任何在2000年（包括2000年）后的数据。 

Hash（哈希）  – 这种模式允许DBA（数据库管理员）通过对表的一个或多个列的Hash Key进行计算，最后通过这个Hash码不同数值对应的数据区域进行分区。例如DBA可以建立一个对表
               主键进行分区的表。
               
Key（键值）    – Hash模式的一种延伸，这里的Hash Key是MySQL系统产生的。 

List（预定义列表） – 这种模式允许系统通过DBA（数据库管理员）定义的列表的值所对应的行数据进行分割。例如：DBA建立了一个横跨三个分区的表，分别根据
                    2004年2005年和2006年值所对应的数据。
                    
Composite（复合模式） - 很神秘吧，哈哈，其实是以上模式的组合使用而已，就不解释了。举例：在初始化已经进行了Range范围分区的表上，我们可以对其中一个分区
                       再进行hash哈希分区。 
 
★垂直分区（按列分）：
举个简单例子：一个包含了大text和BLOB列的表，这些text和BLOB列又不经常被访问，这时候就要把这些不经常使用的text和BLOB了划分到另一个分区，在保证
             它们数据相关性的同时还能提高访问速度。
             
嗯，反正看完上面的就是一种似懂非懂的感觉，再看看例子就很清晰了。

★分区命令详解

◆RANGE 类型(将数据划分不同范围)
CREATE TABLE users (
       uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
       name VARCHAR(30) NOT NULL DEFAULT '',
       email VARCHAR(30) NOT NULL DEFAULT ''
)
PARTITION BY RANGE (uid) (
       PARTITION p0 VALUES LESS THAN (300)
 
       PARTITION p1 VALUES LESS THAN (600)
 
       PARTITION p2 VALUES LESS THAN MAXVALUE     
);
注意：
1、分区字段必须是主键、联合主键的一部分，否则会报如下错误：
A PRIMARY KEY must include all columns in the table's partitioning function
2、分区字段值的设置必须是连续的，否则会报错
注解：
PARTITION 分区名 VALUES LESS THAN (字段值)

上表意为，uid值小于300的记录，存放在p0表分区，值大于等于300，小于600的记录，存放在p1表分区，小于最大值，大于等于600的记录，都存放在p2分区。

注意：如果创建分区表时，使用了MAXVALUE，形如：PARTITION pmax VALUES LESS MAXVALUE，那么新增分区时会报错，类似如下：
MAXVALUE can only be used in last partition definition
原因：因为新增分区时，是在原有分区列表末尾继续添加，而THAN MAXVALUE正好位于末尾，同时其也包含了要添加的分区范围，所提系统会任务冲突。
解决方法，定义分区表时，不设置MAXVALUE。

◆LIST 类型（列表的值所对应的行数据进行分割）
CREATE TABLE category (
     cid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(30) NOT NULL DEFAULT ''
)
PARTITION BY LIST (cid) (
     PARTITION p0 VALUES IN (0,4,8,12)
     
     PARTITION p1 VALUES IN (1,5,9,13)
     
     PARTITION p2 VALUES IN (2,6,10,14)
     
     PARTITION p3 VALUES IN (3,7,11,15)
);

HASH 类型（对表的一个或多个列的Hash Key进行计算，最后通过这个Hash码不同数值对应的数据区域进行分区。）
CREATE TABLE users (
     uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(30) NOT NULL DEFAULT '',
     email VARCHAR(30) NOT NULL DEFAULT ''
)
#分成4个区
PARTITION BY HASH (uid) PARTITIONS 4 (
     PARTITION p0
 
     PARTITION p1
 
     PARTITION p2
 
     PARTITION p3
);

KEY 类型(Hash模式的一种延伸，这里的Hash Key是MySQL系统产生的。)
CREATE TABLE users (
     uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(30) NOT NULL DEFAULT '',
     email VARCHAR(30) NOT NULL DEFAULT ''
)
#分成4个区
PARTITION BY KEY (uid) PARTITIONS 4 (
     PARTITION p0
     
     PARTITION p1
     
     PARTITION p2 
     
     PARTITION p3 
);

子分区
子分区是针对 RANGE/LIST 类型的分区表中每个分区的再次分割。再次分割可以是 HASH/KEY 等类型。

对 RANGE 分区再次进行子分区划分，子分区采用 HASH 类型:
CREATE TABLE users (
     uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(30) NOT NULL DEFAULT '',
     email VARCHAR(30) NOT NULL DEFAULT ''
)
PARTITION BY RANGE (uid) SUBPARTITION BY HASH (uid % 4) SUBPARTITIONS 2(
     PARTITION p0 VALUES LESS THAN (3000000)
 
     PARTITION p1 VALUES LESS THAN (6000000)
);

 对 RANGE 分区再次进行子分区划分，子分区采用 KEY 类型:
 CREATE TABLE users (
     uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(30) NOT NULL DEFAULT '',
     email VARCHAR(30) NOT NULL DEFAULT ''
)
PARTITION BY RANGE (uid) SUBPARTITION BY KEY(uid) SUBPARTITIONS 2(
     PARTITION p0 VALUES LESS THAN (3000000)
     
     PARTITION p1 VALUES LESS THAN (6000000)
);
参考原文链接：
https://www.cnblogs.com/mzhaox/p/11201715.html
https://www.cnblogs.com/shouke/p/10157517.html
