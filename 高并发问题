这个话题能将的很多，要学习的地方也很多，今天正好看到http://www.php20.cn/index/3【转】，有了些共鸣，就转写一下普通程序员在遇到高并发问题时能做些什么。
1.索引
mysql数据表设计,一定要考虑全面,给查询频繁使用的字段增加索引,或者组合索引，不然在高并发环境下，你就会发现QQ和法拉利的差距。

2.查询数据缓存
配置数据,变更不频繁或查询频繁的数据可以通过redis,memcache,file(不推荐)等方式增加缓存,避免数据库频繁查询造成额外的数据库性能消耗。

场景一:进网站的轮播图,由于变更不频繁,可以设置缓存1天,当轮播图修改更新时,更新缓存。

场景二:10万个会员的聊天室,进来需要查询聊天记录,由于聊天记录变更频繁并且查询频繁,可设置缓存1-3秒,缓存失效才去取一次数据库,将大部分查询都进入缓存中查询,大大降低了数据库压力。

在高并发环境下，对于不必要实时更新的数据，都可以考虑使用缓存，这样可以有效减少访问数据库的次数，提高访问速度（缓存提取更快），减小服务器压力。

3.查询逻辑优化
场景一:当你想在一个1000万的访问表,统计会员A的访问记录时,你会发现,就算给会员id增加了索引,也会很慢,因为这个涉及到了数据命中条数
mysql命中条数越多,则查询越慢。

优化方案:由于是访问表,不算是重要数据,可增加一个统计表,统计每天的访问数量,当你要查会员A的访问总数,则直接去sum统计表中的数据,大大提高了性能。

在大数据量的情况下，后台展示数据常常会出现速度下降的问题，如果有条件维度（时间），或者读取的分页限制（limit）情况会好很多，但对于统计类这种，可以使用定时脚本跑每日统计数据插入统计表里，然后查询时直接从统计表获取数据,这样很可以大大加快查询速度。对于count等的计算也可以借助缓存和定时任务去缓解查询速度。

场景二:某个抽奖程序,A奖品限制每天只能出1万个,判断当天是否超出限制时,一般情况是count(1) 查出奖记录表,这样做是不正确的,正确做法:
1:增加个库存字段,每天自动更新为10000,每次抽中减一,判断是否出完只需要查看库存字段
2:增加个计数表,按每天为单位,每次抽中则字段num+1,判断是否超出限制,只需要查出当天记录的num字段比对就行

运用字段或统计表，减少查询。

场景三:高并发下,会员抢10万个红包怎么做?

每天新增1万条奖品记录,并生成缓存队列(redis),每次抢完则从队列中取数据,抢完批量更新回数据库
(此法甚妙)

这个是必须知道的,当有一个表,字段数有50,而你取数据只需要10个字段时,尽量把select * 写成 select 字段名,字段名,可以让mysql节省没必要的返回数据,从而影响效率。千万别随意用全表搜索！-> `*`
